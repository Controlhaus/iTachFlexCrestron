/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""
//#INCLUDEPATH "C:\Projects\iTachFlexCrestronDemo\iTachFlexLibrary\iTachFlexLibrary\bin\Debug"
#USER_SIMPLSHARP_LIBRARY "iTachFlexLibrary"
/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT
_SKIP_,
_SKIP_,
EnableTcpClient,
GetNetworkSettings,
StartIrLearning,
StopIrLearning;

// ANALOG_INPUT 

STRING_INPUT
TxToTcpClient[255];

// BUFFER_INPUT 
DIGITAL_OUTPUT 
_SKIP_,
_SKIP_;

// ANALOG_OUTPUT 

STRING_OUTPUT
_SKIP_,
_SKIP_,
_SKIP_,
_SKIP_,
RxFromTCPClient,
Configlock,
Ipsetting,
Ipaddress,
Subnet,
Gateway; 

TCPClientClass tcpClient;
iTachFlexClass iTachFlex;
/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
INTEGER_PARAMETER
ipPortTcpClient;
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
STRING_PARAMETER ipAddressTcpClient[15];

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/
#BEGIN_PARAMETER_PROPERTIES ipPortTcpClient
	propValidUnits = unitDecimal;
	propDefaultUnit = unitDecimal;
	propDefaultValue = 4998d;
#END_PARAMETER_PROPERTIES                 

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
// INTEGER
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*
Function MyFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here
}
*/

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
CHANGE EnableTcpClient
{
	if(enableTcpClient)
	{
    	tcpClient.ConnectToServer();
	}
	else
	{
    	tcpClient.DisconnectFromServer();	
	}
}
            
CHANGE TxToTcpClient
{
	tcpClient.SendData(TxToTcpClient);
}
         
PUSH GetNetworkSettings
{
	tcpClient.SendData("get_NET,0:1\x0D");
}
  
PUSH StartIrLearning
{
	tcpClient.SendData("get_IRL\x0D");
}

PUSH StopIrLearning
{
	tcpClient.SendData("stop_IRL\x0D");
}

CALLBACK FUNCTION CallbackEventHandler(String data)
{
	RxFromTCPClient = data;
	iTachFlex.dataReceive(data);
}

CALLBACK FUNCTION UpdateNetworkSettingsEventHandler(String configlockData, String ipsettingData, String ipaddressData, String subnetData, String gatewayData)
{
   Configlock = configlockData;
   Ipsetting = ipsettingData;
   Ipaddress = ipaddressData;
   Subnet = subnetData;
   Gateway = gatewayData;
}
/*****************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
	WaitForInitializationComplete();
	tcpClient.InitializeTcpClient(ipAddressTcpClient, ipPortTcpClient, 100);
	RegisterDelegate(tcpClient,OnDataReceiveEvent,CallbackEventHandler);
	RegisterDelegate(iTachFlex,UpdateNetworkSettingsEvent,UpdateNetworkSettingsEventHandler);
}

